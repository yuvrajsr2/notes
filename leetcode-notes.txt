notes for leetcode and data structures



1. two sum(easy) : Concept: Hash map + complement lookup
Logic:
For each number, calculate target - num
If that value already exists in the dictionary → return both indices
Else, store current number and index
Time: O(n)
Space: O(n)
Pattern: Hash map lookup (complement trick)


2. The Two Sneaky Numbers of Digitville(easy) : Concept: Hash map / set for duplicate detection
Logic:
Track numbers seen so far (with a set or array)
Loop through the list:
If number already seen → it’s a duplicate → store it
Else → add number to seen
Return the two duplicates
Time Complexity:
Using list for seen → O(n²)
Using set or array → O(n)
Space Complexit: O(n)
Pattern: Counting / duplicate detection using a hash map or frequency array

3. Palindome number (Easy) : FIrst used % and // operations to reverse any number not negative and it worked but it says it slow because python
operations are slow, so better to use string reversal like 
            s = str(X)
            return s == s[::-1] after checking for no negatives


4. Roman to Integer (#13) Summary:
Create a dictionary to map each Roman numeral character to its integer value.
Iterate through the string, checking each numeral against the one that comes after it.
If the current numeral is smaller than the next, subtract its value to handle cases like IV or IX; otherwise, add it.
Accumulate the values in a result variable as you loop through the string.
Return the total, which gives the correct integer representation of the Roman numeral.





